{"version":3,"sources":["Register.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Register","Grid","centered","style","height","verticalAlign","Column","width","Segment","compact","Header","textAlign","Form","Field","placeholder","type","Container","Button","color","as","Link","to","Home","Icon","name","fluid","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAuEeA,MA1Df,WACI,OAAS,kBACLC,EAAA,EADK,CACAC,UAAQ,EAACC,MACV,CACIC,OAAQ,SAGhBC,cAAgB,UAChB,kBACAJ,EAAA,EAAKK,OADL,CACYC,MAAQ,KACpB,kBACAC,EAAA,EADA,CACQC,SAAO,GACf,kBACAC,EAAA,EADA,CACOC,UAAY,UADnB,oBAFA,IAGwD,kBACxDC,EAAA,EADwD,KAExD,kBACAA,EAAA,EAAKC,MADL,CACWV,MACP,CACII,MAAO,MAGf,0CANA,IAOwB,2BAClBO,YAAc,kBADI,KAPxB,KAFwD,IAW3C,kBACbF,EAAA,EAAKC,MADQ,CACFV,MACP,CACII,MAAO,MAGf,6CANa,IAOc,2BACrBO,YAAc,oBACpBC,KAAO,YAFoB,KAPd,KAX2C,KAHxD,IAyBO,kBACPC,EAAA,EADO,CACGb,MACN,CACIC,OAAQ,GACRG,MAAO,IAJR,KAzBP,IA+BkB,kBAClBU,EAAA,EADkB,CACXd,MACH,CACII,MAAO,KAGfW,MAAQ,QACRC,GACIC,IAEJC,GAAK,KAVa,YA/BlB,KAFA,KAPK,M,eCyBEC,MA5Bf,WACI,OAAS,kBACLd,EAAA,EADK,CACGU,MAAQ,SAChB,kBACAR,EAAA,EADA,CACOS,GAAK,KACZD,MAAQ,QACRP,UAAY,UAHZ,UAFK,IAKkC,kBACvCD,EAAA,EADuC,CAChCS,GAAK,KACZR,UAAY,UACZ,kBACAY,EAAA,EADA,CACKC,KAAO,eACZN,MAAQ,UAL+B,mBALlC,IAYI,kBACTD,EAAA,EADS,CACFE,GACHC,IAEJC,GAAK,YACLH,MAAQ,MACRO,OAAK,GACL,kBACAF,EAAA,EADA,CACKC,KAAO,YARH,WAZJ,M,OCwBEE,MAvBf,WACE,OAAS,kBACP,IADO,KAEP,kBACA,IADA,KAEA,kBACA,IADA,CACMC,OAAK,EAACC,KAAO,KACnB,kBACA,EADA,OAJA,IAOQ,kBACR,IADQ,CACFA,KAAO,aACb,kBACA,EADA,OATA,KAFO,MCFSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c0b8dd84.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Segment,\r\n    Header,\r\n    Form,\r\n    Button,\r\n    Container,\r\n    Grid\r\n} from 'semantic-ui-react';\r\nimport {\r\n    Link\r\n} from 'react-router-dom';\r\n\r\nfunction Register() {\r\n    return ( <\r\n        Grid centered style = {\r\n            {\r\n                height: '100vh'\r\n            }\r\n        }\r\n        verticalAlign = 'middle' >\r\n        <\r\n        Grid.Column width = '3' >\r\n        <\r\n        Segment compact >\r\n        <\r\n        Header textAlign = 'center' > Selamat Datang < /Header> <\r\n        Form >\r\n        <\r\n        Form.Field style = {\r\n            {\r\n                width: 220\r\n            }\r\n        } >\r\n        <\r\n        label > Email < /label> <\r\n        input placeholder = 'masukkan email' > < /input> <\r\n        /Form.Field> <\r\n        Form.Field style = {\r\n            {\r\n                width: 220\r\n            }\r\n        } >\r\n        <\r\n        label > Password < /label> <\r\n        input placeholder = 'masukkan password'\r\n        type = 'password' > < /input> <\r\n        /Form.Field> <\r\n        /Form> <\r\n        Container style = {\r\n            {\r\n                height: 16,\r\n                width: 0\r\n            }\r\n        } > < /Container> <\r\n        Button style = {\r\n            {\r\n                width: 220\r\n            }\r\n        }\r\n        color = 'green'\r\n        as = {\r\n            Link\r\n        }\r\n        to = '/' > Daftar < /Button> <\r\n        /Segment> <\r\n        /Grid.Column> <\r\n        /Grid>\r\n    );\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport {\r\n    Segment,\r\n    Header,\r\n    Button,\r\n    Icon\r\n} from 'semantic-ui-react';\r\nimport {\r\n    Link\r\n} from 'react-router-dom';\r\n\r\nfunction Home() {\r\n    return ( <\r\n        Segment color = 'green' >\r\n        <\r\n        Header as = 'h1'\r\n        color = 'green'\r\n        textAlign = 'center' > Home < /Header> <\r\n        Header as = 'h3'\r\n        textAlign = 'center' >\r\n        <\r\n        Icon name = 'check circle'\r\n        color = 'green' / >\r\n        Selamat Datang <\r\n        /Header> <\r\n        Button as = {\r\n            Link\r\n        }\r\n        to = '/Register'\r\n        color = 'red'\r\n        fluid >\r\n        <\r\n        Icon name = 'log out' / >\r\n        Keluar <\r\n        /Button> <\r\n        /Segment>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport Register from './Register';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Home from './Home';\n\n//import { Button } from 'semantic-ui-react';\nimport './App.css';\n\nfunction App() {\n  return ( <\n    Router >\n    <\n    Switch >\n    <\n    Route exact path = '/' >\n    <\n    Home / >\n    <\n    /Route> <\n    Route path = '/register' >\n    <\n    Register / >\n    <\n    /Route> <\n    /Switch> <\n    /Router>\n\n    //<Button>Click Here</Button>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}